from pydantic import BaseModel, UUID4, Field, EmailStr
from typing import Optional


# Shared properties
class UserBase(BaseModel):
    name: Optional[str] = None
    professor: Optional[bool] = None
    lastname: Optional[str] = None
    firstname: Optional[str] = None
    gender: Optional[str] = None
    pronounce: Optional[str] = None
    biography: Optional[str] = None
    eduemail: Optional[EmailStr] = None
    phonenumber: Optional[int] = None
    personal_homepage: Optional[str] = None
    featured_publications: Optional[str] = None
    award_honor: Optional[str] = None
    department: Optional[str] = None
    photo: Optional[str] = None
    research_area: Optional[int] = None
    middle_name: Optional[str] = None
    university: Optional[str] = None


# Properties to receive via API on creation
class UserCreate(UserBase):
    id: UUID4


# Properties to receive via API on update
class UserUpdate(UserBase):
    pass


class ProfessorUpdate(BaseModel):
    # 可以包含教授可以更新的所有字段
    name: Optional[str] = None
    lastname: Optional[str] = None
    firstname: Optional[str] = None
    gender: Optional[str] = None
    pronounce: Optional[str] = None
    biography: Optional[str] = None
    eduemail: Optional[EmailStr] = None
    phonenumber: Optional[int] = None
    personal_homepage: Optional[str] = None
    featured_publications: Optional[str] = None
    award_honor: Optional[str] = None
    department: Optional[str] = None
    photo: Optional[str] = None
    research_area: Optional[int] = None
    middle_name: Optional[str] = None
    university: Optional[str] = None


class NonProfessorUpdate(BaseModel):
    # 非教授用户只能更新这些字段
    biography: Optional[str] = None
    eduemail: Optional[EmailStr] = None
    phonenumber: Optional[int] = None
    personal_homepage: Optional[str] = None
    featured_publications: Optional[str] = None
    award_honor: Optional[str] = None
    photo: Optional[str] = None
    research_area: Optional[int] = None
    middle_name: Optional[str] = None
    university: Optional[str] = None


# Properties to return to client
class User(UserBase):
    id: UUID4

    class Config:
        orm_mode = True
class ResearchBase(BaseModel):
    # This will be the base class with shared attributes
    title: Optional[str] = None
    professor_id: Optional[UUID4] = None
    description: Optional[str] = None
    money: Optional[int] = None
    location: Optional[str] = None
    university: Optional[str] = None
    isfulltime: Optional[bool] = None


class ResearchCreate(ResearchBase):
    # Attributes required for creation can be added here
    # Since 'id' is typically generated by the database, it's not included here
    pass

class ResearchUpdate(ResearchBase):
    # Attributes for update operations can be added here
    pass

class ResearchInDB(ResearchBase):
    # This will represent a complete DB entry with all attributes
    id: UUID4

    class Config:
        orm_mode = True

class ApplicationSchema(BaseModel):
    id: UUID4
    research_id: UUID4
    student_id: UUID4
    status: int
    letter: Optional[str]

    class Config:
        orm_mode = True

# 如果你需要一个用于创建新应用程序实例的schema（不包括id字段，因为它是自动生成的）
class ApplicationCreateSchema(BaseModel):
    research_id: UUID4
    student_id: UUID4
    status: int
    letter: Optional[str]

# 如果你需要一个用于更新应用程序实例的schema
class ApplicationUpdateSchema(BaseModel):
    research_id: Optional[UUID4]
    student_id: Optional[UUID4]
    status: Optional[int]
    letter: Optional[str]